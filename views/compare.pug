extends layout 
block dropdown 
    a(class="dropdown-item" href="signout") Signout
block content
    div(class='container col-12 col-sm-4 shadow-lg p-3 mb-5 bg-white rounded text-center' style='margin-top:50px')
        form(action="/compare" method="POST") 
            input(type="text"  placeholder="handle 1" name ="handle1" required style="margin-top:25px;margin-right:10px")
            input(type="text" placeholder="handle 2" name ="handle2" required style="margin-bottom:25px" )
            br
            if(contestsAttempted==0 && ContestsAttempted==0)
                div(class = "alert alert-danger text-center" role = "alert") Both users didn't attempt any contests
                    br
            else if (contestsAttempted==0)
                div(class = "alert alert-danger text-center" role = "alert") handle 1 didn't attempt any contest
                    br
            else if (ContestsAttempted==0)
                div(class = "alert alert-danger text-center" role = "alert") handle 2 didn't attempt any contest
                    br
            button(type="submit" class = "btn btn-success") Compare 
    if(problemsSolved && ProblemsSolved)
        table(border="1" class="container table table-hover" style="margin-top:50px;margin-bottom:50px")
                tr 
                    th stats table 
                    th #{handle}
                    th #{Handle}
                tr 
                    td Prolems Tried
                    td #{problemsTried}
                    td #{ProblemsTried}
                tr 
                    td  Problems Solved 
                    td #{problemsSolved}
                    td #{ProblemsSolved}
                tr 
                    td  Contests
                    td #{contestsAttempted}
                    td #{ContestsAttempted}
                tr 
                    td  current rating
                    td #{currentRating}
                    td #{CurrentRating}
                tr 
                    td  max rating
                    td #{maxRating}
                    td #{MaxRating}
                tr 
                    td min rating
                    td #{minRating}
                    td #{MinRating}
                tr 
                    td max up 
                    td #{maxUp}
                    td #{MaxUp}
                tr 
                    td max down 
                    td #{maxDown}
                    td #{MaxDown}
                tr 
                    td best rank
                    td #{bestRank}
                    td #{BestRank}
                tr 
                    td worst rank
                    td #{worstRank}
                    td #{WorstRank}
                tr 
                    td average attempts
                    td #{averageAttempts}
                    td #{AverageAttempts}
    if(contestsAttempted && contestsAttempted)
        div
            div(class='container d-flex justify-content-center shadow p-3 mb-5 bg-white rounded' id="rating" style="width: 900px; height: 500px; ")
            div(class='container d-flex justify-content-center shadow p-3 mb-5 bg-white rounded' id="contest" style="width: 900px; height: 500px; ")
            div(class='container d-flex justify-content-center shadow p-3 mb-5 bg-white rounded'  id="difficulty" style="width: 2000px; height: 720px; ")
            div(class='container d-flex justify-content-center shadow p-3 mb-5 bg-white rounded'  id="index" style="width: 2000px; height: 720px; ")
            div(class='container d-flex justify-content-center shadow p-3 mb-5 bg-white rounded' id="tag" style="overflow-x:scroll; overflow-y:hidden; position:relative; width:1500px; height:500px; display:inline-block" )
    br
    if(contestsAttempted && ContestsAttempted)
        table(border="1" class="container table table-hover" style="margin-bottom:50px")
            tr 
                th common contests and their ranks 
                th #{handle}
                th #{Handle}
            each val,key in compare 
                if (val.length === 3)
                    tr 
                        td 
                            a(href="http://codeforces.com/contest/"+key target="_blank")
                                = val[1].contestName 
                        td 
                            =val[1].rank 
                        td 
                            =val[2].rank
                
                        
        script.
            google.charts.load("current", {packages:['corechart']});
            google.charts.setOnLoadCallback(drawChart);

            function drawChart() {
                var chartData  =[["title",!{JSON.stringify(handle)},!{JSON.stringify(Handle)}]]
                chartData.push(["CurrentRating",#{currentRating},#{CurrentRating}])
                chartData.push(["MaxRating",#{maxRating},#{MaxRating}])
                chartData.push(["MinRating",#{minRating},#{MinRating}])
                var data = google.visualization.arrayToDataTable(chartData);
                var options = {
                    title: "Max , Min , Current Rating",
                    legend: {position: 'top'}
                }
                var chart = new google.visualization.ColumnChart(document.getElementById("rating"));
                chart.draw(data, options);
            }
        script.
            google.charts.load("current", {packages:['corechart']});
            google.charts.setOnLoadCallback(drawChart);

            function drawChart() {
                var chartData  =[["title",!{JSON.stringify(handle)},!{JSON.stringify(Handle)}]]
                chartData.push(["Contests",#{contestsAttempted},#{ContestsAttempted}])
                var data = google.visualization.arrayToDataTable(chartData);
                var options = {
                    title:"Contests Attempted",
                    legend: {position: 'top'},
                    vAxis:{
                        minValue:0
                    },
                }
                var chart = new google.visualization.ColumnChart(document.getElementById("contest"));
                chart.draw(data, options);
            }

        script.
            google.charts.load("current", {packages:['corechart']});
            google.charts.setOnLoadCallback(drawChart);
            
            
            function drawChart() {
                var index1 = !{JSON.stringify(indexList)}
                var d1 = !{JSON.stringify(indexCount)}
                var index2 = !{JSON.stringify(IndexList)}
                var d2 = !{JSON.stringify(IndexCount)}
                var chartData  =[["Index",!{JSON.stringify(handle)},!{JSON.stringify(Handle)}]]
                var level,ps1,ps2;
                for (let i=0;i<Math.max(d1.length,d2.length);i++)
                {   
                    level = index1[i] || index2[i]
                    ps1 = d1[i] || 0
                    ps2 = d2[i] || 0 
                    if (ps1!=0 || ps2!=0){
                        chartData.push([level,ps1,ps2])
                    }
                        
                }
                var data = google.visualization.arrayToDataTable(chartData);


                var options = {
                    title:"Problems Index",
                    legend: {position: 'top'},
                };
                var chart = new google.visualization.ColumnChart(document.getElementById("index"));
                chart.draw(data, options);
            }

        script.
            google.charts.load("current", {packages:['corechart']});
            google.charts.setOnLoadCallback(drawChart);
            
            
            function drawChart() {
                var difficulty1 = !{JSON.stringify(difficultyList)}
                var d1 = !{JSON.stringify(difficultyCount)}
                var difficulty2 = !{JSON.stringify(DifficultyList)}
                var d2 = !{JSON.stringify(DifficultyCount)}
                console.log(difficulty1)
                console.log(difficulty2) 
                var chartData  =[["Difficulty",!{JSON.stringify(handle)},!{JSON.stringify(Handle)}]]
                var difficulty ,ps1,ps2;
                for (let i=0;i<Math.max(d1.length,d2.length);i++)
                {   
                    difficulty  = difficulty1[i] || difficulty2[i]
                    ps1 = d1[i] || 0
                    ps2 = d2[i] || 0 
                    if (ps1!=0 || ps2!=0){
                        chartData.push([difficulty,ps1,ps2])
                    }
                        
                }
                var data = google.visualization.arrayToDataTable(chartData);


                var options = {
                    title:"Difficulty",
                    legend: {position: 'top'},
                };
                var chart = new google.visualization.ColumnChart(document.getElementById("difficulty"));
                chart.draw(data, options);
            }

        script.
            google.charts.load("current", {packages:['corechart']});
            google.charts.setOnLoadCallback(drawChart);
            
            
            function drawChart() {
                var tag1 = !{JSON.stringify(tagList)}
                var d1 =!{JSON.stringify(tagCount)}
                var tag2 = !{JSON.stringify(TagList)}
                var d2 = !{JSON.stringify(TagCount)}
                var chartData  =[["Tag",!{JSON.stringify(handle)},!{JSON.stringify(Handle)}]]
                var tag ,ps1,ps2;
                for (let i=0;i<Math.max(d1.length,d2.length);i++)
                {   
                    tag  = tag1[i] || tag2[i]
                    ps1 = d1[i] || 0
                    ps2 = d2[i] || 0 
                    if (ps1!=0 || ps2!=0){
                        chartData.push([tag ,ps1,ps2])
                    }
                        
                }
                var data = google.visualization.arrayToDataTable(chartData);
                var options = {
                    title:"tags",
                    legend: {position: 'top'},
                };
                var chart = new google.visualization.ColumnChart(document.getElementById("tag"));
                chart.draw(data, options);
            }